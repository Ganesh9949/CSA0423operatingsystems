#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define BUFFER_SIZE 10

int buffer[BUFFER_SIZE];
int count = 0;

pthread_mutex_t mutex;
pthread_cond_t full;
pthread_cond_t empty;

void *producer(void *arg) {
    int item;

    for (int i = 0; i < BUFFER_SIZE * 2; ++i) {
        item = rand() % 100;  // Generate a random item
        
        pthread_mutex_lock(&mutex);
        while (count == BUFFER_SIZE) {  // Wait if the buffer is full
            pthread_cond_wait(&empty, &mutex);
        }

        buffer[count] = item;
        count++;

        pthread_cond_signal(&full);
        pthread_mutex_unlock(&mutex);
        
        printf("Producer produced item: %d\n", item);
    }

    pthread_exit(NULL);
}

void *consumer(void *arg) {
    int item;

    for (int i = 0; i < BUFFER_SIZE * 2; ++i) {
        pthread_mutex_lock(&mutex);
        while (count == 0) {  // Wait if the buffer is empty
            pthread_cond_wait(&full, &mutex);
        }

        item = buffer[count - 1];
        count--;

        pthread_cond_signal(&empty);
        pthread_mutex_unlock(&mutex);

        printf("Consumer consumed item: %d\n", item);
    }

    pthread_exit(NULL);
}

int main() {
    pthread_t producerThread, consumerThread;

    pthread_mutex_init(&mutex, NULL);
    pthread_cond_init(&full, NULL);
    pthread_cond_init(&empty, NULL);

    pthread_create(&producerThread, NULL, producer, NULL);
    pthread_create(&consumerThread, NULL, consumer, NULL);

    pthread_join(producerThread, NULL);
    pthread_join(consumerThread, NULL);

    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&full);
    pthread_cond_destroy(&empty);

    return 0;
}
