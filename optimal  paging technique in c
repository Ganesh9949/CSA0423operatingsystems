#include <stdio.h>
#include <limits.h>

#define MAX_FRAMES 3
#define MAX_PAGES 10

void printPageTable(int pageTable[], int n) {
    printf("Page Table: ");
    for (int i = 0; i < n; ++i) {
        printf("%d ", pageTable[i]);
    }
    printf("\n");
}

int isPageFault(int pageTable[], int n, int page) {
    for (int i = 0; i < n; ++i) {
        if (pageTable[i] == page) {
            return 0;  // Page found in the page table, no page fault
        }
    }
    return 1;  // Page not found in the page table, page fault
}

int getOptimalPageIndex(int pages[], int pageTable[], int n, int currentIndex) {
    int index = -1;
    int farthest = currentIndex;

    for (int i = 0; i < n; ++i) {
        int j;
        for (j = currentIndex + 1; j < MAX_PAGES; ++j) {
            if (pageTable[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    index = i;
                }
                break;
            }
        }
        if (j == MAX_PAGES) {
            return i;
        }
    }

    if (index == -1) {
        return 0;
    }

    return index;
}

void optimalPageReplacement(int pages[], int n) {
    int pageTable[MAX_FRAMES] = {-1};  // Initialize the page table with -1 (empty frame)
    int pageFaults = 0;

    for (int i = 0; i < n; ++i) {
        if (isPageFault(pageTable, MAX_FRAMES, pages[i])) {
            int index = getOptimalPageIndex(pages, pageTable, MAX_FRAMES, i);
            pageTable[index] = pages[i];
            pageFaults++;
        }
        printPageTable(pageTable, MAX_FRAMES);
    }

    printf("\nTotal Page Faults: %d\n", pageFaults);
}

int main() {
    int pages[MAX_PAGES];
    int numberOfPages;

    printf("Enter the number of pages (max %d): ", MAX_PAGES);
    scanf("%d", &numberOfPages);

    printf("Enter the page references: ");
    for (int i = 0; i < numberOfPages; ++i) {
        scanf("%d", &pages[i]);
    }

    optimalPageReplacement(pages, numberOfPages);

    return 0;
}
